{"ast":null,"code":"import axios from \"axios\";\nimport Store from '../Store';\n\nfunction GetLocation() {\n  return new Promise((resolve, reject) => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(location => resolve(location), error => reject(error));\n    }\n  });\n}\n\nfunction getOptions(options) {\n  // Get the current state of the client\n  let state = Store.getState(); // If we have a user anda session\n\n  if (state.user && Object.keys(state.user.user).length !== 0 && Object.keys(state.user.session).length !== 0) {\n    // Check if options already has headers,\n    // if not then create a new object\n    if (!options.headers) {\n      options.headers = {};\n    } // Set the user and token header for the server\n\n\n    options.headers['x-user-id'] = state.user.user.id;\n    options.headers['x-token'] = state.user.session.access_token;\n  } // return the options\n\n\n  return options;\n}\n\nfunction handleResponse(resolve, reject, options, response) {\n  // Check if something on the server went wrong,\n  // if something did go wrong then reject the promise\n  // and return the message\n  if (response.data.status === false) {\n    reject(response.data.message);\n  } // If nothing went wrong,\n  // check to see if the call wants the full response,\n  // if so resolve the full response,\n\n\n  if (options.full) {\n    resolve(response);\n  } // otherwise resolve only the data of the response\n  else {\n      resolve(response.data);\n    }\n}\n\nexport default {\n  get(url, options = {}) {\n    return new Promise((resolve, reject) => {\n      options = getOptions(options);\n      axios.get(url, options).then(response => handleResponse(resolve, reject, options, response));\n    });\n  },\n\n  post(url, body, options = {}) {\n    return new Promise((resolve, reject) => {\n      options = getOptions(options);\n      axios.post(url, body, options).then(response => handleResponse(resolve, reject, options, response));\n    });\n  },\n\n  put(url, body, options = {}) {\n    return new Promise((resolve, reject) => {\n      options = getOptions(options);\n      axios.put(url, body, options).then(response => handleResponse(resolve, reject, options, response));\n    });\n  },\n\n  GetLocation\n};","map":{"version":3,"sources":["/Users/austin/dev/fish-maps/ui/classes/Plugins.ts"],"names":["axios","Store","GetLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","location","error","getOptions","options","state","getState","user","Object","keys","length","session","headers","id","access_token","handleResponse","response","data","status","message","full","get","url","then","post","body","put"],"mappings":"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","sourcesContent":["import axios from \"axios\"\nimport Store from '../Store'\n\nfunction GetLocation(): Promise<Position> {\n\treturn new Promise((resolve, reject) => {\n\t\tif (navigator.geolocation) {\n\t\t\tnavigator.geolocation.getCurrentPosition(\n\t\t\t\t(location) => resolve(location),\n\t\t\t\t(error) => reject(error)\n\t\t\t)\n\t\t}\n\t})\n}\n\nfunction getOptions(options) {\n    // Get the current state of the client\n    let state = Store.getState()\n\n    // If we have a user anda session\n    if (state.user && Object.keys(state.user.user).length !== 0 && Object.keys(state.user.session).length !== 0) {\n        // Check if options already has headers,\n        // if not then create a new object\n        if (!options.headers) {\n            options.headers = {}\n        }\n\n        // Set the user and token header for the server\n        options.headers['x-user-id'] = state.user.user.id\n        options.headers['x-token'] = state.user.session.access_token\n    }\n\n    // return the options\n    return options\n}\n\nfunction handleResponse(resolve, reject, options, response) {\n    // Check if something on the server went wrong,\n    // if something did go wrong then reject the promise\n    // and return the message\n    if (response.data.status === false) {\n        reject(response.data.message)\n    }\n\n    // If nothing went wrong,\n    // check to see if the call wants the full response,\n    // if so resolve the full response,\n    if (options.full) {\n        resolve(response)\n    }\n    // otherwise resolve only the data of the response\n    else {\n        resolve(response.data)\n    }\n}\n\nexport default {\n    get(url, options = {}) {\n        return new Promise((resolve, reject) => {\n            options = getOptions(options)\n\n            axios.get(url, options).then(response => handleResponse(resolve, reject, options, response))\n        })\n    },\n    post(url, body, options = {}) {\n        return new Promise((resolve, reject) => {\n            options = getOptions(options)\n\n            axios.post(url, body, options).then(response => handleResponse(resolve, reject, options, response))\n        })\n    },\n    put(url, body, options = {}) {\n        return new Promise((resolve, reject) => {\n            options = getOptions(options)\n\n            axios.put(url, body, options).then(response => handleResponse(resolve, reject, options, response))\n        })\n\t},\n\tGetLocation\n}\n"]},"metadata":{},"sourceType":"module"}