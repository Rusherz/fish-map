{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fishReducer from \"./fish/reducer\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { HYDRATE, createWrapper } from \"next-redux-wrapper\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\n\nconst bindMiddleware = middleware => {\n  if (true) {\n    const {\n      composeWithDevTools\n    } = require(\"redux-devtools-extension\");\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nconst combinedReducer = combineReducers({\n  fish: fishReducer\n});\n\nconst reducer = (state, action) => {\n  if (action.type === HYDRATE) {\n    const nextState = _objectSpread(_objectSpread({}, state), action.payload);\n\n    if (state.count) nextState.count = state.count; // preserve count value on client side navigation\n\n    return nextState;\n  } else {\n    return combinedReducer(state, action);\n  }\n};\n\nconst initStore = () => {\n  return createStore(reducer, bindMiddleware([thunkMiddleware]));\n};\n\nexport const wrapper = createWrapper(initStore);","map":{"version":3,"sources":["/home/app/store/store.ts"],"names":["fishReducer","thunkMiddleware","HYDRATE","createWrapper","createStore","applyMiddleware","combineReducers","bindMiddleware","middleware","composeWithDevTools","require","combinedReducer","fish","reducer","state","action","type","nextState","payload","count","initStore","wrapper"],"mappings":";;;;;;AAAA,OAAOA,WAAP,MAAwB,gBAAxB;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,oBAAvC;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;;AAEA,MAAMC,cAAc,GAAIC,UAAD,IAAgB;AACtC,YAA2C;AAC1C,UAAM;AAAEC,MAAAA;AAAF,QAA0BC,OAAO,CAAC,0BAAD,CAAvC;;AACA,WAAOD,mBAAmB,CAACJ,eAAe,CAAC,GAAGG,UAAJ,CAAhB,CAA1B;AACA;;AAED,SAAOH,eAAe,CAAC,GAAGG,UAAJ,CAAtB;AACA,CAPD;;AASA,MAAMG,eAAe,GAAGL,eAAe,CAAC;AACvCM,EAAAA,IAAI,EAAEZ;AADiC,CAAD,CAAvC;;AAIA,MAAMa,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAClC,MAAIA,MAAM,CAACC,IAAP,KAAgBd,OAApB,EAA6B;AAC5B,UAAMe,SAAS,mCACXH,KADW,GAEXC,MAAM,CAACG,OAFI,CAAf;;AAIA,QAAIJ,KAAK,CAACK,KAAV,EAAiBF,SAAS,CAACE,KAAV,GAAkBL,KAAK,CAACK,KAAxB,CALW,CAKmB;;AAC/C,WAAOF,SAAP;AACA,GAPD,MAOO;AACN,WAAON,eAAe,CAACG,KAAD,EAAQC,MAAR,CAAtB;AACA;AACD,CAXD;;AAaA,MAAMK,SAAS,GAAG,MAAM;AACvB,SAAOhB,WAAW,CAACS,OAAD,EAAUN,cAAc,CAAC,CAACN,eAAD,CAAD,CAAxB,CAAlB;AACA,CAFD;;AAIA,OAAO,MAAMoB,OAAO,GAAGlB,aAAa,CAACiB,SAAD,CAA7B","sourcesContent":["import fishReducer from \"./fish/reducer\"\nimport thunkMiddleware from \"redux-thunk\"\nimport { HYDRATE, createWrapper } from \"next-redux-wrapper\"\nimport { createStore, applyMiddleware, combineReducers } from \"redux\"\n\nconst bindMiddleware = (middleware) => {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tconst { composeWithDevTools } = require(\"redux-devtools-extension\")\n\t\treturn composeWithDevTools(applyMiddleware(...middleware))\n\t}\n\n\treturn applyMiddleware(...middleware)\n}\n\nconst combinedReducer = combineReducers({\n\tfish: fishReducer,\n})\n\nconst reducer = (state, action) => {\n\tif (action.type === HYDRATE) {\n\t\tconst nextState = {\n\t\t\t...state, // use previous state\n\t\t\t...action.payload, // apply delta from hydration\n\t\t}\n\t\tif (state.count) nextState.count = state.count // preserve count value on client side navigation\n\t\treturn nextState\n\t} else {\n\t\treturn combinedReducer(state, action)\n\t}\n}\n\nconst initStore = () => {\n\treturn createStore(reducer, bindMiddleware([thunkMiddleware]))\n}\n\nexport const wrapper = createWrapper(initStore)\n"]},"metadata":{},"sourceType":"module"}